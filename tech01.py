# -*- coding: utf-8 -*-
"""Tech01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12C9PfXqi0RL1Rl4G_bYE6N7T65pK3Epj

## TechChallange - Fase 1

Olá! Bem-vindos ao nosso vídeo sobre como desenvolver um modelo preditivo de regressão para prever os custos médicos individuais usando o Google Colab.

Vamos explorar os dados, realizar o pré-processamento, criar e avaliar nosso modelo, e finalmente apresentar os resultados.

### Exploração de Dados

Vamos começar carregando nossa base de dados e explorando suas características. Isso nos ajuda a entender a estrutura dos dados e identificar possíveis problemas.
"""

# Importando bibliotecas necessárias
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Carregando a base de dados
data = pd.read_csv('/content/sample_data/tech01.csv')

# Explorando as primeiras linhas do dataset
print(data.head())

# Exibindo informações sobre o dataset
print(data.info())

# Estatísticas descritivas
print(data.describe())

"""
Agora iremos visualizar as distribuições dos dados nos ajuda a identificar padrões e outliers.
"""

# Visualizando distribuições relevantes
sns.pairplot(data)
plt.show()

"""
### Pré-processamento de Dados

Verificamos se há valores ausentes e realizamos a limpeza necessária para garantir a integridade dos dados.
"""

# Verificando valores ausentes
print(data.isnull().sum())

"""
Convertendo variáveis categóricas para formatos numéricos que possam ser usados em nosso modelo.
"""

# Importando biblioteca para codificação de variáveis categóricas
from sklearn.preprocessing import LabelEncoder

# Codificando variáveis categóricas
label_encoder = LabelEncoder()
data['gênero'] = label_encoder.fit_transform(data['gênero'])
data['fumante'] = label_encoder.fit_transform(data['fumante'])
data['região'] = label_encoder.fit_transform(data['região'])

# Verificando as mudanças
print(data.head())

"""
### Modelagem

Criando um modelo de regressão linear para prever os custos médicos.
"""

# Importando bibliotecas necessárias
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Separando variáveis independentes e dependentes
X = data.drop('encargos', axis=1)
y = data['encargos']

# Dividindo os dados em conjuntos de treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criando o modelo de regressão linear
model = LinearRegression()

"""
### Treinamento e Avaliação do Modelo

Treinando o modelo com os dados de treinamento.
"""

# Treinando o modelo
model.fit(X_train, y_train)

"""
#### Utilizar Métricas Estatísticas para Validar a Eficácia do Modelo
Avaliar a performance do modelo usando métricas estatísticas como Mean Squared Error.
"""

# Fazendo previsões nos dados de teste
y_pred = model.predict(X_test)

# Importando bibliotecas para cálculo de métricas
from sklearn.metrics import mean_squared_error

# Calculando métricas
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

"""
### Apresentação dos Resultados
Imprimir as previsões para cada linha da base de dados original.
"""

# Previsão para cada linha da base de dados original
y_pred_all = model.predict(X)

# Impressão das previsões de custos médicos
for i, pred in enumerate(y_pred_all):
    print(f'Previsão de custo médico para linha {i + 1}: {pred}')

"""
## Relatório de Análise de Resultados

### Exploração de Dados

- A base de dados contém características demográficas e de saúde dos indivíduos.
- Variáveis incluem idade, gênero, IMC, filhos, se é fumante, região, e os encargos médicos.

### Pré-processamento de Dados

- Variáveis categóricas foram convertidas usando LabelEncoder.
- Dados foram normalizados para melhorar a performance do modelo de regressão.

### Modelagem

- Foi utilizado um modelo de regressão linear simples.
- Dados foram divididos em conjuntos de treino (80%) e teste (20%).

### Avaliação do Modelo

- Mean Squared Error (MSE): valor do erro médio quadrático.

### Visualização dos Resultados

- Impressão de valores previstos para cada linha do banco.

### Conclusão

- O modelo foi capaz de fazer previsões razoáveis dos custos médicos individuais com base nas características fornecidas.
- Com mais dados, seria possível melhorar a precisão e robustez do modelo.
"""